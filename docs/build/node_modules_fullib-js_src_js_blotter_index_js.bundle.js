/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_fullib-js_src_js_blotter_index_js"],{

/***/ "./node_modules/fullib-js/src/js/blotter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/fullib-js/src/js/blotter/index.js ***!
  \********************************************************/
/***/ (() => {

eval("const MathUtils = {\r\n    // Equation of a line.\r\n    lineEq: (y2, y1, x2, x1, currentVal) => {\r\n        var m = (y2 - y1) / (x2 - x1), b = y1 - m * x1;\r\n        return m * currentVal + b;\r\n    },\r\n    // Linear Interpolation function.\r\n    lerp: (a, b, n) => (1 - n) * a + n * b\r\n};\r\n\r\nlet blotters = document.getElementsByClassName('blotter');\r\n\r\nlet rolling = new Blotter.RollingDistortMaterial(),\r\n    rolling2 = new Blotter.RollingDistortMaterial(),\r\n    rolling3 = new Blotter.RollingDistortMaterial(),\r\n    rolling4 = new Blotter.RollingDistortMaterial(),\r\n    rolling5 = new Blotter.RollingDistortMaterial(),\r\n    liquid = new Blotter.LiquidDistortMaterial(),\r\n    liquid2 = new Blotter.LiquidDistortMaterial()\r\n\r\n// liquid\r\nliquid.uniforms.uSpeed.value = .5;\r\nliquid.uniforms.uVolatility.value = 0;\r\nliquid.uniforms.uSeed.value = 0.4;\r\nlet liquidVolatility = 0.1;\r\n\r\n// liquid-2\r\nliquid2.uniforms.uSpeed.value = .9;\r\nliquid2.uniforms.uVolatility.value = 0;\r\nliquid2.uniforms.uSeed.value = 0.1;\r\nlet liquid2Volatility = 0.1;\r\n\r\n// rolling\r\nrolling.uniforms.uSineDistortSpread.value = 0.28\r\nrolling.uniforms.uSineDistortCycleCount.value = 5\r\nrolling.uniforms.uSineDistortAmplitude.value = 0\r\nrolling.uniforms.uNoiseDistortVolatility.value = 0\r\nrolling.uniforms.uNoiseDistortAmplitude.value = 0\r\nrolling.uniforms.uDistortPosition.value = [0, 0]\r\nrolling.uniforms.uRotation.value = 90\r\nrolling.uniforms.uSpeed.value = 0.3\r\nlet rollingVolatility = 0;\r\n\r\n// rolling-2\r\nrolling2.uniforms.uSineDistortSpread.value = 0.354\r\nrolling2.uniforms.uSineDistortCycleCount.value = 5\r\nrolling2.uniforms.uSineDistortAmplitude.value = 0\r\nrolling2.uniforms.uNoiseDistortVolatility.value = 0\r\nrolling2.uniforms.uNoiseDistortAmplitude.value = 0.168\r\nrolling2.uniforms.uDistortPosition.value = [0.38, 0.68]\r\nrolling2.uniforms.uRotation.value = 48\r\nrolling2.uniforms.uSpeed.value = 0.421\r\nlet rolling2Volatility = 0;\r\n\r\n// rolling-3\r\nrolling3.uniforms.uSineDistortSpread.value = 0.54\r\nrolling3.uniforms.uSineDistortCycleCount.value = 2\r\nrolling3.uniforms.uSineDistortAmplitude.value = 0\r\nrolling3.uniforms.uNoiseDistortVolatility.value = 0\r\nrolling3.uniforms.uNoiseDistortAmplitude.value = 0.15\r\nrolling3.uniforms.uDistortPosition.value = [0.18, 0.98]\r\nrolling3.uniforms.uRotation.value = 90\r\nrolling3.uniforms.uSpeed.value = 0.3\r\nlet rolling3Volatility = 0.05;\r\n\r\n// rolling-4\r\nrolling4.uniforms.uSineDistortSpread.value = 0.44\r\nrolling4.uniforms.uSineDistortCycleCount.value = 5\r\nrolling4.uniforms.uSineDistortAmplitude.value = 0\r\nrolling4.uniforms.uNoiseDistortVolatility.value = 0\r\nrolling4.uniforms.uNoiseDistortAmplitude.value = 0.85\r\nrolling4.uniforms.uDistortPosition.value = [0, 0]\r\nrolling4.uniforms.uRotation.value = 0\r\nrolling4.uniforms.uSpeed.value = 0\r\nlet rolling4Volatility = 0.1;\r\n\r\n// rolling-5\r\nrolling5.uniforms.uSineDistortSpread.value = 0.74\r\nrolling5.uniforms.uSineDistortCycleCount.value = 7\r\nrolling5.uniforms.uSineDistortAmplitude.value = 0\r\nrolling5.uniforms.uNoiseDistortVolatility.value = 0\r\nrolling5.uniforms.uNoiseDistortAmplitude.value = 0.15\r\nrolling5.uniforms.uDistortPosition.value = [0.1, 0.5]\r\nrolling5.uniforms.uRotation.value = 20\r\nrolling5.uniforms.uSpeed.value = 0.7\r\nlet rolling5Volatility = 0.1;\r\n\r\nlet bliquid = new Blotter(liquid);\r\nlet bliquid2 = new Blotter(liquid2);\r\nlet brolling = new Blotter(rolling);\r\nlet brolling2 = new Blotter(rolling2);\r\nlet brolling3 = new Blotter(rolling3);\r\nlet brolling4 = new Blotter(rolling4);\r\nlet brolling5 = new Blotter(rolling5);\r\n\r\nfor (let i = 0, len = blotters.length; i < len; i++) {\r\n    let myElem = blotters[i];\r\n    let myText = myElem.textContent;\r\n    myElem.textContent = \"\";\r\n    let myColor = myElem.getAttribute('data-blotter-color');\r\n    let mySize = myElem.getAttribute('data-blotter-size');\r\n    let myFont = myElem.getAttribute('data-blotter-font');\r\n    let myEffect = myElem.getAttribute('data-blotter-effect');\r\n\r\n\r\n    let text = new Blotter.Text(myText, {\r\n        family: myFont,\r\n        size: mySize,\r\n        fill: myColor\r\n    });\r\n\r\n    if (myEffect === \"liquid\") {\r\n        bliquid.addText(text);\r\n        var scope = bliquid.forText(text);\r\n        scope.appendTo(myElem);\r\n    }\r\n\r\n    if (myEffect === \"rolling\") {\r\n        brolling.addText(text);\r\n        var scope = brolling.forText(text);\r\n        scope.appendTo(myElem);\r\n    }\r\n\r\n    if (myEffect === \"liquid-2\") {\r\n        bliquid2.addText(text);\r\n        var scope = bliquid2.forText(text);\r\n        scope.appendTo(myElem);\r\n    }\r\n\r\n    if (myEffect === \"rolling-2\") {\r\n        brolling2.addText(text);\r\n        var scope = brolling2.forText(text);\r\n        scope.appendTo(myElem);\r\n    }\r\n\r\n    if (myEffect === \"rolling-3\") {\r\n        brolling3.addText(text);\r\n        var scope = brolling3.forText(text);\r\n        scope.appendTo(myElem);\r\n    }\r\n\r\n    if (myEffect === \"rolling-4\") {\r\n        brolling4.addText(text);\r\n        var scope = brolling4.forText(text);\r\n        scope.appendTo(myElem);\r\n    }\r\n\r\n    if (myEffect === \"rolling-5\") {\r\n        brolling5.addText(text);\r\n        var scope = brolling5.forText(text);\r\n        scope.appendTo(myElem);\r\n    }\r\n}\r\n\r\n// Now, change one (or more) uniform value as we scroll.\r\n// The faster the scrolling the more the value changes.\r\nlet currentScroll = window.pageYOffset;\r\n\r\n// It will go from 0 (not scrolling) to 0.9 (scrolling at a speed of maxscroll).\r\nlet maxscroll = 20;\r\nlet uniformValuesRange = [0, 0.1];\r\nlet uniformN = 0.05;\r\n\r\nif (window.innerWidth < 991) {\r\n    maxscroll = 20;\r\n    uniformValuesRange = [0, 0.01];\r\n    uniformN = 0.01;\r\n}\r\n\r\n// Using requestAnimationFrame + linear interpolation for the effect.\r\nconst render = () => {\r\n    // Current scroll position\r\n    const newScroll = window.pageYOffset;\r\n    // How much was scrolled from the last repaint.\r\n    const scrolled = Math.abs(newScroll - currentScroll);\r\n    // Get the new value of volatility.\r\n    liquidVolatility = MathUtils.lerp(liquidVolatility, Math.min(MathUtils.lineEq(uniformValuesRange[1], uniformValuesRange[0], maxscroll, 0, scrolled), 0.2), uniformN);\r\n    rollingVolatility = MathUtils.lerp(rollingVolatility, Math.min(MathUtils.lineEq(uniformValuesRange[1], uniformValuesRange[0], maxscroll, 0, scrolled), 0.2), uniformN);\r\n    liquid2Volatility = MathUtils.lerp(liquid2Volatility, Math.min(MathUtils.lineEq(uniformValuesRange[1], uniformValuesRange[0], maxscroll, 0, scrolled), 0.2), uniformN);\r\n    rolling2Volatility = MathUtils.lerp(rolling2Volatility, Math.min(MathUtils.lineEq(uniformValuesRange[1], uniformValuesRange[0], maxscroll, 0, scrolled), 0.2), uniformN);\r\n    rolling3Volatility = MathUtils.lerp(rolling3Volatility, Math.min(MathUtils.lineEq(uniformValuesRange[1], uniformValuesRange[0], maxscroll, 0, scrolled), 0.2), uniformN);\r\n    rolling4Volatility = MathUtils.lerp(rolling4Volatility, Math.min(MathUtils.lineEq(uniformValuesRange[1], uniformValuesRange[0], maxscroll, 0, scrolled), 0.2), uniformN);\r\n    rolling5Volatility = MathUtils.lerp(rolling5Volatility, Math.min(MathUtils.lineEq(uniformValuesRange[1], uniformValuesRange[0], maxscroll, 0, scrolled), 0.2), uniformN);\r\n    // Set the volatility.\r\n    liquid.uniforms.uVolatility.value = liquidVolatility;\r\n    rolling.uniforms.uSineDistortAmplitude.value = rollingVolatility;\r\n    liquid2.uniforms.uVolatility.value = liquid2Volatility;\r\n    rolling2.uniforms.uSineDistortAmplitude.value = rolling2Volatility;\r\n    rolling3.uniforms.uSineDistortAmplitude.value = rolling3Volatility;\r\n    rolling4.uniforms.uSineDistortAmplitude.value = rolling4Volatility;\r\n    rolling5.uniforms.uSineDistortAmplitude.value = rolling5Volatility;\r\n    // Update the current scroll.\r\n    currentScroll = newScroll;\r\n    // Repeat.\r\n    requestAnimationFrame(render);\r\n}\r\nrequestAnimationFrame(render);\n\n//# sourceURL=webpack:///./node_modules/fullib-js/src/js/blotter/index.js?");

/***/ })

}]);